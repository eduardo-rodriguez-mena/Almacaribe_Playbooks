---
- name: Borrar snapshots de VMs y CTs en nodos Proxmox
  hosts: "{{ update_hosts | default('pm-hosts') }}" # Puedes cambiar 'pm-hosts' por el grupo de hosts que necesites
  gather_facts: false # No necesitamos recopilar hechos para esta tarea
  become: false      # No necesitamos sudo, ya que nos conectamos como root

  vars:
    # Definir el nombre del snapshot y la descripción dinámicamente
    snapshot_name: "Ansible_snapshot_Temp_Update"

  tasks:
    - name: Obtener lista de VMs en el nodo actual
      ansible.builtin.command: qm list
      register: vm_list_output
      changed_when: false

    - name: Borrar snapshot Todas las VMs
      ansible.builtin.shell: |
        set -euo pipefail
        VMID="{{ item.split(' ')[1] }}"
        if [[ "$VMID" =~ ^[0-9]+$ ]]; then
          # Comprobar si el snapshot existe
          if  qm listsnapshot "$VMID" | grep -q "{{ snapshot_name }}"; then
            echo "El snapshot '{{ snapshot_name }}' existe para VM $VMID. Eliminando..."
            qm delsnapshot "$VMID" "{{ snapshot_name }}"
          fi
        else
          echo "Saltando línea no válida en la lista de VMs: {{ item }}"
        fi
      loop: "{{ vm_list_output.stdout_lines[1:] | trim | regex_replace('\\s+', ' ') }}"
      loop_control:
        loop_var: item
      args:
        chdir: /root
        executable: /bin/bash
      register: vm_snapshot_result
      changed_when: "'Borrando snapshot' in vm_snapshot_result.stdout"
      failed_when: "'ERROR' in vm_snapshot_result.stderr or 'Error:' in vm_snapshot_result.stderr"
      when: vm_list_output.stdout_lines | length > 1

    - name: Obtener lista de CTs en el nodo actual
      ansible.builtin.command: pct list
      register: ct_list_output
      changed_when: false

    - name: Borrar snapshots de Todos los CTs
      ansible.builtin.shell: |
        set -euo pipefail
        CTID="{{ item.split(' ')[0] }}"
        if [[ "$CTID" =~ ^[0-9]+$ ]]; then
          # Comprobar si el snapshot ya existe
          if pct listsnapshot "$CTID" | grep -q "{{ snapshot_name }}"; then
            echo "El snapshot '{{ snapshot_name }}' ya existe para CT $CTID. Eliminando..."
            pct delsnapshot "$CTID" "{{ snapshot_name }}"
          fi
        else
          echo "Saltando línea no válida en la lista de CTs: {{ item }}"
        fi
      loop: "{{ ct_list_output.stdout_lines[1:] | trim | regex_replace('\\s+', ' ') }}"
      loop_control:
        loop_var: item
      when: ct_list_output.stdout_lines | length > 1
      args:
        chdir: /root
        executable: /bin/bash
      register: ct_snapshot_result
      changed_when: "'Borrando snapshot' in ct_snapshot_result.stdout"
      failed_when: "'ERROR' in ct_snapshot_result.stderr or 'Error:' in ct_snapshot_result.stderr"
